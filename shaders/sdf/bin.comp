#version 430 core

#ifndef GROUP_SIZE
#define GROUP_SIZE 512
#endif

layout (local_size_x = GROUP_SIZE) in;

struct Position {
	float x, y, z;
};

layout (std430, binding = 0) readonly buffer position_buffer {
	Position in_pos[];
};
layout (std430, binding = 1) writeonly buffer local_cell_index_buffer {
	uint out_local_cell_idx[];
};
layout (std430, binding = 2) buffer cell_count_buffer {
	uint in_out_cell_count[];
};

layout (std140, binding = 0) uniform ubo {
	vec3  aabb_min;
	float _pad0;
	vec3  cell_ext;
	float _pad1;
	uvec3 cell_dim;
	uint  num_spheres;
};

void main() {
	uint i = gl_GlobalInvocationID.x;
    if (i < num_spheres) {
    	vec3 pos = vec3(in_pos[i].x, in_pos[i].y, in_pos[i].z) - aabb_min;
    	uvec3 cell_coord = clamp(uvec3(pos / cell_ext), uvec3(0), cell_dim - 1);
    	uint  cell_idx = cell_dim.x * cell_dim.y * cell_coord.z + cell_dim.x * cell_coord.y + cell_coord.x;
    	//out_global_cell_idx[i] = cell_idx;
    	out_local_cell_idx[i] = atomicAdd(in_out_cell_count[cell_idx], 1U);
	}
}