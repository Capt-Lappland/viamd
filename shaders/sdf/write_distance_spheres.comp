#version 430 core

layout (local_size_x = 3, local_size_y = 3, local_size_z = 3) in;

layout (std430, binding = 0) buffer cell_offset_buffer {
    uint in_cell_offset[];
};
layout (std430, binding = 1) buffer cell_count_buffer {
    uint in_cell_count[];
};
layout (rgba8, binding = 0) uniform imageBuffer u_compressed_sphere;
layout (r8i,   binding = 1) uniform iimage3D u_distance_volume;

uniform uvec3 u_voxel_dim = uvec3(64,64,64);
uniform vec3  u_voxel_ext;
uniform uvec3 u_cell_dim;
uniform vec3  u_cell_ext;
uniform vec3  u_inv_cell_ext;
uniform float u_max_radius;

shared int min_distance;

vec4 decompress_sphere(int idx, vec3 cell_pos) {
    vec4 sphere = imageLoad(u_compressed_sphere, idx);
    sphere.xyz = sphere.xyz * u_cell_ext + cell_pos;
    sphere.w = sphere.w * u_max_radius;
    return sphere;
}

int encode_distance(float d) {
    // Max distance we encode is distance of 4 voxels
    float max_dist = u_voxel_ext.x * 4;
    return int(clamp(d / max_dist, -1.0, 1.0) * 127);
}

void main() {
    uvec3 g_coord = gl_WorkGroupID;
    uvec3 l_coord = gl_LocalInvocationID;
    uvec3 g_voxel_coord = g_coord;
    vec3 voxel_pos = g_voxel_coord * u_voxel_ext + u_voxel_ext * 0.5;
    uvec3 g_cell_coord = uvec3(voxel_pos * u_inv_cell_ext);
    uvec3 t_cell_coord = g_cell_coord - uvec3(1) + l_coord;

    min_distance = 127;

    t_cell_coord = clamp(t_cell_coord, uvec3(0), u_cell_dim - 1);

    uint t_cell_idx = u_cell_dim.x * u_cell_dim.y * t_cell_coord.z + u_cell_dim.x * t_cell_coord.y + t_cell_coord.x;
    uint offset = in_cell_offset[t_cell_idx];
    uint count = in_cell_count[t_cell_idx];

    vec3 cell_pos = t_cell_coord * u_cell_ext;

    int min_d = 127;
    for (uint i = offset; i < offset + count; i++) {
        vec4 sphere = decompress_sphere(int(i), cell_pos);
        float d = distance(voxel_pos, sphere.xyz) - sphere.w;
        min_d = min(min_d, encode_distance(d));
    }

    atomicMin(min_distance, min_d);

    groupMemoryBarrier();

    bool write = (l_coord == uvec3(0,0,0));
    if (write) {
        imageStore(u_distance_volume, ivec3(g_coord), ivec4(min_distance));
    }
}