#version 430 core

//#define USE_COMPRESSED_SPHERES

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (std430, binding = 0) readonly buffer cell_offset_buffer {
    uint in_cell_offset[];
};
layout (std430, binding = 1) readonly buffer cell_count_buffer {
    uint in_cell_count[];
};
layout (std430, binding = 2) readonly buffer sphere_buffer {
#ifdef USE_COMPRESSED_SPHERES
    uint in_sphere[];
#else
    vec4 in_sphere[];
#endif
};

layout (r32f, binding = 0) uniform image3D u_distance_volume;

layout (std140,  binding = 0) uniform u_block {
    vec3  aabb_min;
    float _pad0;
    vec3  voxel_ext;
    float max_radius;
    vec3  cell_ext;
    float max_distance;
    uvec3 cell_dim;
    float search_radius;
};


vec4 decompress_sphere(uint compressed_sphere, vec3 cell_pos) {
    vec4 sphere = unpackUnorm4x8(compressed_sphere);
    sphere.xyz = sphere.xyz * cell_ext + cell_pos;
    sphere.w = sphere.w * max_radius;
    return sphere;
}

int encode_distance(float d) {
    // Max distance we encode is distance of 4 voxels
    return int(clamp(d / max_distance, -1.0, 1.0) * 127);
}

/*
shared int min_distance;

void main() {
    uvec3 g_coord = gl_WorkGroupID;
    uvec3 l_coord = gl_LocalInvocationID;
    uvec3 g_voxel_coord = g_coord;
    // Position is relative to AABB
    vec3 voxel_pos = g_voxel_coord * voxel_ext + voxel_ext * 0.5;
    uvec3 g_cell_coord = uvec3(voxel_pos / cell_ext);
    uvec3 t_cell_coord = g_cell_coord - uvec3(1) + l_coord;

    bool t_write = (t_cell_coord == uvec3(0,0,0));
    if (t_write) min_distance = 127;
    //memoryBarrierShared();
    barrier();

    t_cell_coord = clamp(t_cell_coord, uvec3(0), cell_dim - 1);

    uint t_cell_idx = cell_dim.x * cell_dim.y * t_cell_coord.z + cell_dim.x * t_cell_coord.y + t_cell_coord.x;
    uint offset = in_cell_offset[t_cell_idx];
    uint count = in_cell_count[t_cell_idx];

    // Position is relative to AABB
    vec3 cell_pos = t_cell_coord * cell_ext;

    int min_d = 127;
    for (uint i = offset; i < offset + count; i++) {
        //vec4 sphere = decompress_sphere(int(i), cell_pos);
        vec4 sphere = in_sphere[i];
        float d = distance(voxel_pos, sphere.xyz) - sphere.w;
        min_d = min(min_d, encode_distance(d));
    }

    atomicMin(min_distance, min_d);
    //memoryBarrierShared();
    barrier();

    if (t_write) {
        imageStore(u_distance_volume, ivec3(g_coord), ivec4(min_distance));
    }
}
*/

void main() {
    uvec3 voxel_coord = gl_GlobalInvocationID;

    // Position is relative to AABB
    vec3 voxel_pos = (vec3(voxel_coord) + 0.5) * voxel_ext;

    float min_d = max_distance;
    float radius = search_radius;

    ivec3 dim = ivec3(cell_dim);
    ivec3 min_c = max(ivec3((voxel_pos - radius) / cell_ext), ivec3(0));
    ivec3 max_c = min(ivec3((voxel_pos + radius) / cell_ext), dim - 1);
    for (int z = min_c.z; z <= max_c.z; z++) {
        for (int y = min_c.y; y <= max_c.y; y++) {
            for (int x = min_c.x; x <= max_c.x; x++) {
                int cell_idx = dim.x * dim.y * z + dim.x * y + x;
#ifdef USE_COMPRESSED_SPHERES
                vec3 cell_pos = vec3(x,y,z) * cell_ext;
#endif
                uint offset = in_cell_offset[cell_idx];
                uint count = in_cell_count[cell_idx];
                uint beg = offset;
                uint end = offset + count;
                for (uint i = beg; i != end; i++) {
                    vec4 sphere = in_sphere[i];
#ifdef USE_COMPRESSED_SPHERES                    
                    sphere = decompress_sphere(sphere, cell_pos);
#endif                    
                    float d = distance(voxel_pos, sphere.xyz) - sphere.w;
                    min_d = min(min_d, d);
                }
            }
        }
    }
    //min_d = encode_distance(distance(voxel_pos, vec3(4.963)));

    //imageStore(u_distance_volume, ivec3(voxel_coord), ivec4(min_d));
    if (min_d < max_distance) {
        float d = min_d / max_distance;
        //d = 0.5;
        //int d = encode_distance(min_d);
        imageStore(u_distance_volume, ivec3(voxel_coord), vec4(d));
    }
}