#version 430 core

#ifndef GROUP_SIZE
#define GROUP_SIZE 512
#endif

//#define USE_COMPRESSED_SPHERES

layout (local_size_x = GROUP_SIZE) in;

struct Position {
    float x, y, z;
};

layout (std430, binding = 0) readonly buffer position_buffer {
    Position in_pos[];
};
layout (std430, binding = 1) readonly buffer radius_buffer {
    float in_rad[];
};
layout (std430, binding = 2) readonly buffer cell_offset_buffer {
    uint in_cell_offset[];
};
layout (std430, binding = 3) readonly buffer cell_count_buffer {
    uint in_cell_count[];
};
layout (std430, binding = 4) readonly buffer local_cell_index_buffer {
    uint in_local_cell_idx[];
};
layout (std430, binding = 5) writeonly buffer sphere_buffer {
#ifdef USE_COMPRESSED_SPHERES
    uint out_sphere[];
#else
    vec4 out_sphere[];
#endif
};

layout (std140,  binding = 0) uniform ubo {
    vec3  aabb_min;
    float _pad0;
    vec3  cell_ext;
    float max_radius;
    uvec3 cell_dim;
    uint  num_elements;
};

uint compress_sphere(vec4 sphere, vec3 cell_pos) {
    sphere.xyz = (sphere.xyz - cell_pos) / cell_ext;
    sphere.w = sphere.w / max_radius;
    return packUnorm4x8(sphere);
}

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i < num_elements) {
        vec4 sphere = vec4(vec3(in_pos[i].x, in_pos[i].y, in_pos[i].z) - aabb_min, in_rad[i]);
        uvec3 cell_coord = clamp(uvec3(sphere.xyz / cell_ext), uvec3(0), cell_dim - 1);
        uint cell_idx = cell_dim.x * cell_dim.y * cell_coord.z + cell_dim.y * cell_coord.y + cell_coord.x;
        uint dst_idx = in_cell_offset[cell_idx] + in_local_cell_idx[i];
        vec3 cell_pos = cell_coord * cell_ext;
#ifdef USE_COMPRESSED_SPHERES
        out_sphere[dst_idx] = compress_sphere(sphere, cell_pos);
#else
        out_sphere[dst_idx] = sphere;
#endif
    }
}