#version 430 core

#ifndef GROUP_SIZE
#define GROUP_SIZE 512
#endif

layout (local_size_x = GROUP_SIZE) in;

layout (std430, binding = 0) buffer position_buffer {
    vec3 in_pos[];
};
layout (std430, binding = 1) buffer radius_buffer {
    vec3 in_rad[];
};
layout (std430, binding = 2) buffer cell_offset_buffer {
    uint in_cell_offset[];
};
layout (std430, binding = 4) buffer internal_cell_index_buffer {
    uint in_internal_cell_idx[];
};

layout (rgba8,  binding = 0) uniform imageBuffer u_compressed_sphere;

uniform uint  u_num_elements;
uniform uvec3 u_cell_dim;
uniform vec3  u_cell_ext;
uniform vec3  u_min_aabb;
uniform vec3  u_inv_cell_ext;
uniform float u_max_radius;

vec4 compress_sphere(vec4 sphere, uvec3 cell_coord) {
    vec3 cell_pos = vec3(cell_coord) * u_cell_ext;
    sphere.xyz = (sphere.xyz - cell_pos) * u_inv_cell_ext;
    sphere.w = sphere.w / u_max_radius;
    return sphere;
}

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i < u_num_elements) {
        vec4 sphere = vec4(in_pos[i] - u_min_aabb, in_rad[i]);
        uvec3 cell_coord = uvec3(sphere.xyz * u_inv_cell_ext);
        uint cell_idx = u_cell_dim.x * u_cell_dim.y * cell_coord.z + u_cell_dim.x * cell_coord.y + cell_coord.x;
        uint write_idx = in_cell_offset[cell_idx] + in_internal_cell_idx[i];
        sphere = compress_sphere(sphere, cell_coord);
        imageStore(u_compressed_sphere, int(write_idx), sphere);
    }
}